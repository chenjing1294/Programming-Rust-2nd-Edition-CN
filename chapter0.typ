#heading(level: 1, numbering: none)[前言]

Rust 是一种用于系统编程的语言。 现在这有一些解释，因为系统编程对大多数工作的程序员来说都不熟悉。 然而，它是我们所做一切的基础。 你合上笔记本电脑。 操作系统检测到这一点，暂停所有正在运行的程序，关闭屏幕，并让计算机进入睡眠状态。 稍后，您打开笔记本电脑：屏幕和其他组件再次启动，每个程序都可以从中断处继续运行。 我们认为这是理所当然的。 但是系统程序员编写了大量代码来实现这一点。 系统编程是为了：


- 操作系统
- 各种设备驱动程序
- 文件系统
- 数据库
- 在非常便宜的设备或必须极其可靠的设备上运行的代码
- 密码学
- 媒体编解码器（用于读取和写入音频、视频和图像文件的软件）
- 媒体处理（例如，语音识别或照片编辑软件）
- 内存管理（例如，实现垃圾收集器）
- 文本渲染（将文本和字体转换为像素）
- 实现高级编程语言（如 JavaScript 和 Python）
- 联网
- 虚拟化和软件容器
- 科学仿真
- 游戏

简而言之，系统编程是资源受限的编程。 当每个字节和每个 CPU 周期都很重要时，使用系统编程。

支持基本应用程序所涉及的系统代码量是惊人的。

本书不会教您系统编程。 事实上，本书涵盖了内存管理的许多细节，如果您还没有自己进行过一些系统编程，那么这些细节乍一看可能显得不必要的深奥。 但是，如果您是一位经验丰富的系统程序员，您会发现 Rust 与众不同：一种新工具可以消除困扰整个行业数十年的重大、广为人知的问题。

== 谁应该读这本书

如果您已经是一名系统程序员并且准备好使用 C++ 的替代品，那么本书适合您。 如果您是任何编程语言的经验丰富的开发人员，无论是 C\#、Java、Python、JavaScript 还是其他语言，本书也适合您。

但是，您不仅需要学习 Rust。 要充分利用该语言，您还需要获得一些系统编程经验。 我们建议在阅读本书的同时使用 Rust 实现一些系统编程方面的项目。 构建您以前从未构建过的东西，利用 Rust 的速度、并发性和安全性。 本序言开头的主题列表应该会给您一些想法。


== 我们为什么写这本书

当我们开始学习 Rust 时，我们开始着手编写我们希望拥有的书。 我们的目标是预先和正面处理 Rust 中的大的、新的概念，清晰而深入地呈现它们，以最大限度地减少通过反复试验学习。

== 本书各章节内容摘要

本书的前两章介绍了 Rust，并在我们继续第 3 章的基本数据类型之前提供了一个简短的浏览。第 4 章和第 5 章讨论了所有权和引用的核心概念。 我们建议您按顺序通读前五章。

第 6 章到第 10 章涵盖了该语言的基础知识：表达式（第 6 章）、错误处理（第 7 章）、包和模块（第 8 章）、结构体（第 9 章）以及枚举和模式（第 10 章）。 在这里略读一下是可以的，但是不要跳过关于错误处理的章节。 

第 11 章涵盖特征和泛型，这是您需要了解的最后两个重要概念。 特征就像 Java 或 C\# 中的接口。 它们也是 Rust 支持将类型集成到语言本身的主要方式。 第 12 章展示了特征如何支持运算符重载，第 13 章涵盖了更多实用特征。


了解特征和泛型可以打开本书的其余部分。 闭包和迭代器是你不想错过的两个重要的强大工具，分别在第 14 章和第 15 章中介绍。 您可以按任何顺序阅读其余章节，或根据需要深入阅读。 它们涵盖了语言的其余部分：集合（第 16 章）、字符串和文本（第 17 章）、输入和输出（第 18 章）、并发（第 19 章）、异步代码（第 20 章）、宏（第 21 章）、不安全代码（第 22 章），以及用其他语言调用函数（第 23 章）。

== 本书中使用的约定

本书使用以下排版约定：

_Italic_

#h(2em)表示新术语、URL、电子邮件地址、文件名和文件扩展名。

`Constant width`

#h(2em)用于程序列表，以及在段落中引用程序元素，例如变量或函数名称、数据库、数据类型、环境变量、语句和关键字。

*`Constant width bold`*

#h(2em)显示应由用户逐字输入的命令或其他文本。

_`Constant width italic`_

#h(2em)显示应替换为用户提供的值或由上下文确定的值的文本。


#align(center)[
#block(
  fill: luma(230),
  inset: 8pt,
  radius: 4pt,
)[#align(center)[NOTE] 此图标表示一般注释。]
]

== 代码示例

补充材料（代码示例、练习等）可在 https://github.com/ProgrammingRust 下载。 本书旨在帮助您完成工作。 一般来说，如果本书提供了示例代码，您可以在您的程序和文档中使用它。 除非您要复制代码的重要部分，否则无需联系我们获得许可。 例如，编写一个使用本书中几段代码的程序不需要许可。 销售或分发 O'Reilly 图书中的示例需要获得许可。 通过引用本书和引用示例代码来回答问题不需要许可。 将本书中的大量示例代码合并到您的产品文档中确实需要获得许可。

我们感谢但不要求署名。 署名通常包括书名、作者、出版商和 ISBN。 例如：“Programming Rust, Second Edition by
Jim Blandy, Jason Orendorff, and Leonora F.S. Tindall (O’Reilly). Copyright 20 21 Jim Blandy, Leonora F.S. Tindall, and Jason Orendorff, 978-1-492-05259-3.”

如果您觉得您对代码示例的使用不属于合理使用或上述许可范围，请随时通过 permissions\@oreilly.com 与我们联系。